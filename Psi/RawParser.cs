
#line 1 "RawParser.rl"
using System;
using System.Collections.Generic;
using System.Text;

namespace Psi
{
	public class RawParser
	{
		ArraySegment<byte> value;
		ArraySegment<byte> target;

		int tmp1 = 0;
		int tmp2 = 0;
		int tmp3 = 0;
		int tmp4 = 0;
		int tmp5 = 0;
		int tmp6 = 0;

		int value_start;

		public static int Number(ArraySegment<byte> arr)
		{
			return Number(arr.Array, arr.Offset, arr.Count);
		}

		public static int Number(byte[] data, int start, int count)
		{
			int res = 0;
			for (int i = 0; i < count; i++) {
				res *= 10;
				res += (data[start + i] - '0');
			}
			return res;
		}

		
#line 278 "RawParser.rl"


		public event Action<DateTime> DateTime;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> Option;

		#region Log Message Types

		public event Action<ArraySegment<byte>, ArraySegment<byte>> Meta;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> Kick;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> Rcon;

		public event Action LogFileStart;
		public event Action LogFileEnd;

		public event Action ServerCVarsStart;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> ServerCVarSet;
		public event Action ServerCVarsEnd;

		public event Action<ArraySegment<byte>> ServerSay;

		public event Action<ArraySegment<byte>> LoadingMap;
		public event Action<ArraySegment<byte>> StartedMap;

		public event Action<ArraySegment<byte>> WorldTrigger;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> TeamTrigger;
		public event Action<ArraySegment<byte>, int, int> TeamScore;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerConnect;
		public event Action<ArraySegment<byte>> PlayerDisconnect;
		public event Action<ArraySegment<byte>> PlayerEnterGame;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerJoinTeam;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerTrigger;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerTriggerAgainst;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerAttack;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerKill;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSay;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSayTeam;
		public event Action<ArraySegment<byte>> PlayerValidate;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerNameChange;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSuicide;

		#endregion

		public event Action End;

		int cs;

		
#line 91 "RawParser.cs"
static readonly sbyte[] _psi_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	4, 1, 5, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 24, 1, 25, 1, 
	26, 1, 27, 1, 28, 1, 29, 1, 
	30, 1, 31, 1, 32, 1, 33, 1, 
	34, 1, 35, 1, 36, 1, 39, 1, 
	40, 1, 43, 1, 45, 1, 46, 1, 
	47, 1, 48, 1, 50, 1, 51, 1, 
	53, 1, 54, 1, 57, 1, 58, 1, 
	59, 1, 63, 1, 64, 1, 65, 1, 
	66, 1, 67, 1, 70, 2, 1, 2, 
	2, 1, 5, 2, 4, 5, 2, 4, 
	6, 2, 9, 10, 2, 15, 16, 2, 
	16, 1, 2, 16, 5, 2, 17, 18, 
	2, 19, 20, 2, 22, 23, 2, 24, 
	25, 2, 26, 27, 2, 29, 30, 2, 
	31, 32, 2, 34, 35, 2, 37, 38, 
	2, 40, 6, 2, 41, 42, 2, 44, 
	49, 2, 44, 52, 2, 44, 56, 2, 
	44, 62, 2, 44, 68, 2, 44, 69, 
	2, 45, 46, 2, 47, 48, 2, 55, 
	56, 2, 57, 58, 2, 60, 61, 2, 
	63, 64, 2, 64, 1, 2, 64, 5, 
	2, 65, 66, 2, 66, 1, 2, 66, 
	5, 3, 2, 3, 6, 3, 16, 1, 
	5, 3, 16, 4, 5, 3, 21, 22, 
	23, 3, 36, 37, 38, 3, 40, 41, 
	42, 3, 41, 42, 1, 3, 43, 44, 
	49, 3, 43, 44, 52, 3, 43, 44, 
	56, 3, 43, 44, 62, 3, 43, 44, 
	68, 3, 43, 44, 69, 3, 54, 55, 
	56, 3, 59, 60, 61, 3, 64, 1, 
	5, 3, 64, 4, 5, 3, 66, 1, 
	5, 3, 66, 4, 5, 4, 1, 2, 
	3, 6
};

static readonly short[] _psi_key_offsets =  new short [] {
	0, 0, 1, 2, 4, 6, 7, 9, 
	11, 12, 14, 16, 18, 20, 21, 22, 
	23, 25, 27, 28, 30, 32, 33, 35, 
	37, 38, 39, 47, 48, 49, 50, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 83, 85, 
	86, 87, 88, 89, 91, 92, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 236, 237, 238, 239, 241, 244, 
	247, 248, 249, 251, 254, 257, 258, 260, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 272, 275, 278, 279, 280, 282, 285, 
	288, 289, 291, 293, 294, 295, 296, 297, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 317, 318, 319, 320, 321, 322, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 334, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 382, 383, 384, 385, 387, 389, 391, 
	393, 395, 397, 398, 400, 401, 404, 407, 
	410, 411, 413, 414, 417, 419, 421, 423, 
	425, 427, 429, 430, 433, 435, 437, 439, 
	441, 443, 444, 447, 450, 453, 454, 457, 
	460, 463, 464, 467, 469, 472, 474, 476, 
	478, 481, 483, 485, 487, 488, 489, 490, 
	491, 492, 494, 495, 496, 497, 499, 500, 
	501, 502, 503, 504, 505, 506, 507, 509, 
	510, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 520, 521, 523, 526, 529, 530, 
	531, 533, 536, 539, 540, 542, 544, 545, 
	546, 547, 548, 549, 550, 551, 552, 553, 
	554, 555, 556, 557, 558, 559, 560, 561, 
	562, 563, 564, 565, 567, 568, 569, 570, 
	571, 572, 573, 574, 577, 578, 579, 580, 
	581, 582, 583, 584, 587, 588, 589, 590, 
	591, 592, 593, 594, 595, 598, 601, 602, 
	603, 604, 605, 606, 607, 608, 609, 610, 
	611, 612, 613, 614, 615, 616, 617, 618, 
	619, 620, 621, 622, 623, 624, 625, 626, 
	627, 628, 629, 630, 631, 632, 633, 634, 
	635, 636, 637, 639, 641, 643, 644, 646, 
	648, 650, 653, 656, 658, 661, 664, 666, 
	668, 671, 674, 676, 679, 682, 683, 685, 
	687, 689, 691, 693, 696, 699, 702, 705, 
	707, 709, 711, 714, 717, 719, 722, 725, 
	727, 730, 733, 736
};

static readonly char[] _psi_trans_keys =  new char [] {
	'\u004c', '\u0020', '\u0030', '\u0039', '\u0030', '\u0039', '\u002f', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u002f', '\u0030', '\u0039', '\u0030', '\u0039', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u0020', '\u002d', '\u0020', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u003a', '\u0030', '\u0039', '\u0030', '\u0039', 
	'\u003a', '\u0030', '\u0039', '\u0030', '\u0039', '\u003a', '\u0020', '\u0022', 
	'\u004b', '\u004c', '\u0052', '\u0053', '\u0054', '\u0057', '\u005b', '\u0022', 
	'\u0022', '\u0020', '\u0053', '\u0061', '\u0063', '\u0064', '\u0065', '\u006a', 
	'\u006b', '\u0073', '\u0074', '\u0054', '\u0045', '\u0041', '\u004d', '\u0020', 
	'\u0055', '\u0053', '\u0045', '\u0052', '\u0049', '\u0044', '\u0020', '\u0076', 
	'\u0061', '\u006c', '\u0069', '\u0064', '\u0061', '\u0074', '\u0065', '\u0064', 
	'\u0028', '\u0020', '\u0029', '\u0020', '\u0029', '\u0022', '\u0022', '\u0022', 
	'\u0029', '\u0022', '\u0028', '\u0074', '\u0074', '\u0061', '\u0063', '\u006b', 
	'\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', '\u0077', 
	'\u0069', '\u0074', '\u0068', '\u0020', '\u0022', '\u0022', '\u0022', '\u0068', 
	'\u006f', '\u0061', '\u006e', '\u0067', '\u0065', '\u0064', '\u0020', '\u006e', 
	'\u0061', '\u006d', '\u0065', '\u0020', '\u0074', '\u006f', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u006d', '\u006e', '\u006d', '\u0069', '\u0074', '\u0074', 
	'\u0065', '\u0064', '\u0020', '\u0073', '\u0075', '\u0069', '\u0063', '\u0069', 
	'\u0064', '\u0065', '\u0020', '\u0077', '\u0069', '\u0074', '\u0068', '\u0020', 
	'\u0022', '\u0022', '\u0022', '\u006e', '\u0065', '\u0063', '\u0074', '\u0065', 
	'\u0064', '\u002c', '\u0020', '\u0061', '\u0064', '\u0064', '\u0072', '\u0065', 
	'\u0073', '\u0073', '\u0020', '\u0022', '\u0022', '\u0022', '\u0069', '\u0073', 
	'\u0063', '\u006f', '\u006e', '\u006e', '\u0065', '\u0063', '\u0074', '\u0065', 
	'\u0064', '\u006e', '\u0074', '\u0065', '\u0072', '\u0065', '\u0064', '\u0020', 
	'\u0074', '\u0068', '\u0065', '\u0020', '\u0067', '\u0061', '\u006d', '\u0065', 
	'\u006f', '\u0069', '\u006e', '\u0065', '\u0064', '\u0020', '\u0074', '\u0065', 
	'\u0061', '\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0069', '\u006c', 
	'\u006c', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', 
	'\u0077', '\u0069', '\u0074', '\u0068', '\u0020', '\u0022', '\u0022', '\u0022', 
	'\u0061', '\u0079', '\u0020', '\u005f', '\u0022', '\u0022', '\u0022', '\u0022', 
	'\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', 
	'\u0022', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0022', '\u0028', '\u0022', '\u0028', '\u0074', '\u0065', 
	'\u0061', '\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0022', '\u0028', 
	'\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', '\u0022', 
	'\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0022', '\u0022', '\u0028', '\u0022', '\u0028', '\u0072', '\u0069', '\u0067', 
	'\u0067', '\u0065', '\u0072', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', 
	'\u0022', '\u0028', '\u0061', '\u0067', '\u0061', '\u0069', '\u006e', '\u0073', 
	'\u0074', '\u0020', '\u0022', '\u0022', '\u0022', '\u0069', '\u0063', '\u006b', 
	'\u003a', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', '\u0077', '\u0061', 
	'\u0073', '\u0020', '\u006b', '\u0069', '\u0063', '\u006b', '\u0065', '\u0064', 
	'\u0020', '\u0062', '\u0079', '\u0020', '\u0022', '\u0022', '\u0022', '\u006f', 
	'\u0061', '\u0067', '\u0064', '\u0069', '\u006e', '\u0067', '\u0020', '\u006d', 
	'\u0061', '\u0070', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', '\u0066', 
	'\u0069', '\u006c', '\u0065', '\u0020', '\u0063', '\u0073', '\u006c', '\u006f', 
	'\u0073', '\u0065', '\u0064', '\u0074', '\u0061', '\u0072', '\u0074', '\u0065', 
	'\u0064', '\u0063', '\u006f', '\u006e', '\u003a', '\u0020', '\u0022', '\u0022', 
	'\u0022', '\u0020', '\u0022', '\u0022', '\u0066', '\u0022', '\u0072', '\u0022', 
	'\u006f', '\u0022', '\u006d', '\u0020', '\u0022', '\u0022', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u0028', '\u0066', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0022', '\u0020', '\u0022', '\u0022', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0028', '\u0022', '\u0066', '\u0022', '\u0072', '\u0022', 
	'\u006f', '\u0022', '\u006d', '\u0020', '\u0022', '\u0022', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0066', '\u0022', '\u0072', '\u0022', '\u006f', '\u0022', 
	'\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0028', '\u0066', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', '\u0022', '\u0028', 
	'\u0066', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', 
	'\u0020', '\u0022', '\u0029', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', 
	'\u0022', '\u0066', '\u0022', '\u0028', '\u0022', '\u0028', '\u0022', '\u0028', 
	'\u0066', '\u0022', '\u0028', '\u0022', '\u0028', '\u0065', '\u0074', '\u0072', 
	'\u0076', '\u0065', '\u0072', '\u0020', '\u0063', '\u0073', '\u0076', '\u0061', 
	'\u0072', '\u0020', '\u0073', '\u0022', '\u0022', '\u0020', '\u003d', '\u0020', 
	'\u0022', '\u0022', '\u0020', '\u0065', '\u0073', '\u006e', '\u0064', '\u0074', 
	'\u0061', '\u0072', '\u0074', '\u0061', '\u0079', '\u0020', '\u0022', '\u0022', 
	'\u0022', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0022', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0029', '\u0022', '\u0022', '\u0028', '\u0022', '\u0028', 
	'\u0061', '\u0072', '\u0074', '\u0065', '\u0064', '\u0020', '\u006d', '\u0061', 
	'\u0070', '\u0020', '\u0022', '\u0022', '\u0022', '\u0065', '\u0061', '\u006d', 
	'\u0020', '\u0022', '\u0022', '\u0022', '\u0020', '\u0073', '\u0074', '\u0063', 
	'\u006f', '\u0072', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0030', 
	'\u0039', '\u0020', '\u0077', '\u0069', '\u0074', '\u0068', '\u0020', '\u0022', 
	'\u0022', '\u0030', '\u0039', '\u0020', '\u0070', '\u006c', '\u0061', '\u0079', 
	'\u0065', '\u0072', '\u0073', '\u0022', '\u0030', '\u0039', '\u0022', '\u0030', 
	'\u0039', '\u0072', '\u0069', '\u0067', '\u0067', '\u0065', '\u0072', '\u0065', 
	'\u0064', '\u0020', '\u0022', '\u0022', '\u0022', '\u006f', '\u0072', '\u006c', 
	'\u0064', '\u0020', '\u0074', '\u0072', '\u0069', '\u0067', '\u0067', '\u0065', 
	'\u0072', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0022', '\u004d', 
	'\u0045', '\u0054', '\u0041', '\u005d', '\u0020', '\u0020', '\u003a', '\u0020', 
	'\u003a', '\u0020', '\u003a', '\u0020', '\u0020', '\u0029', '\u0020', '\u0022', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', 
	'\u0029', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0028', (char) 0
};

static readonly sbyte[] _psi_single_lengths =  new sbyte [] {
	0, 1, 1, 0, 0, 1, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 0, 0, 1, 0, 0, 
	1, 1, 8, 1, 1, 1, 9, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 2, 3, 3, 
	1, 1, 2, 3, 3, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 3, 3, 1, 1, 2, 3, 3, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 1, 2, 1, 3, 3, 3, 
	1, 2, 1, 3, 2, 2, 2, 2, 
	2, 2, 1, 3, 2, 2, 2, 2, 
	2, 1, 3, 3, 3, 1, 3, 3, 
	3, 1, 3, 2, 3, 2, 2, 2, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 3, 3, 1, 1, 
	2, 3, 3, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 1, 2, 2, 
	2, 3, 3, 2, 3, 3, 2, 2, 
	3, 3, 2, 3, 3, 1, 2, 2, 
	2, 2, 2, 3, 3, 3, 3, 2, 
	2, 2, 3, 3, 2, 3, 3, 2, 
	3, 3, 3, 3
};

static readonly sbyte[] _psi_range_lengths =  new sbyte [] {
	0, 0, 0, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	1, 1, 0, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
};

static readonly short[] _psi_index_offsets =  new short [] {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 48, 50, 59, 61, 63, 65, 75, 
	77, 79, 81, 83, 85, 87, 89, 91, 
	93, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 122, 125, 
	127, 129, 131, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	176, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 216, 218, 220, 222, 224, 
	226, 228, 230, 232, 234, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 272, 
	274, 276, 278, 280, 282, 284, 286, 288, 
	290, 292, 294, 296, 298, 300, 302, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 332, 334, 336, 
	338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 362, 364, 366, 368, 
	370, 372, 374, 376, 378, 380, 382, 384, 
	386, 388, 390, 392, 394, 396, 398, 400, 
	402, 404, 406, 408, 410, 412, 414, 416, 
	418, 420, 423, 425, 427, 429, 432, 436, 
	440, 442, 444, 447, 451, 455, 457, 460, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 482, 486, 490, 492, 494, 497, 501, 
	505, 507, 510, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	540, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	653, 656, 658, 660, 662, 664, 666, 668, 
	670, 672, 674, 676, 678, 680, 682, 684, 
	686, 688, 690, 692, 694, 697, 700, 703, 
	706, 709, 712, 714, 717, 719, 723, 727, 
	731, 733, 736, 738, 742, 745, 748, 751, 
	754, 757, 760, 762, 766, 769, 772, 775, 
	778, 781, 783, 787, 791, 795, 797, 801, 
	805, 809, 811, 815, 818, 822, 825, 828, 
	831, 835, 838, 841, 844, 846, 848, 850, 
	852, 854, 857, 859, 861, 863, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 885, 
	887, 889, 891, 893, 895, 897, 899, 901, 
	903, 905, 907, 909, 912, 916, 920, 922, 
	924, 927, 931, 935, 937, 940, 943, 945, 
	947, 949, 951, 953, 955, 957, 959, 961, 
	963, 965, 967, 969, 971, 973, 975, 977, 
	979, 981, 983, 985, 988, 990, 992, 994, 
	996, 998, 1000, 1002, 1005, 1007, 1009, 1011, 
	1013, 1015, 1017, 1019, 1022, 1024, 1026, 1028, 
	1030, 1032, 1034, 1036, 1038, 1041, 1044, 1046, 
	1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 
	1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 
	1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 
	1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 
	1112, 1114, 1116, 1119, 1122, 1125, 1127, 1130, 
	1133, 1136, 1140, 1144, 1147, 1151, 1155, 1158, 
	1161, 1165, 1169, 1172, 1176, 1180, 1182, 1185, 
	1188, 1191, 1194, 1197, 1201, 1205, 1209, 1213, 
	1216, 1219, 1222, 1226, 1230, 1233, 1237, 1241, 
	1244, 1248, 1252, 1256
};

static readonly short[] _psi_trans_targs =  new short [] {
	2, 0, 3, 0, 4, 0, 5, 0, 
	6, 0, 7, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 0, 
	18, 0, 19, 0, 20, 0, 21, 0, 
	22, 0, 23, 0, 24, 0, 25, 0, 
	26, 0, 27, 258, 284, 316, 371, 427, 
	474, 492, 0, 29, 28, 29, 28, 30, 
	0, 31, 60, 80, 141, 152, 167, 181, 
	199, 235, 0, 32, 0, 33, 0, 34, 
	0, 35, 0, 36, 0, 37, 0, 38, 
	0, 39, 0, 40, 0, 41, 0, 42, 
	0, 43, 0, 44, 0, 45, 0, 46, 
	0, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 501, 0, 53, 0, 55, 
	502, 54, 55, 502, 54, 56, 0, 58, 
	57, 58, 57, 501, 0, 56, 53, 0, 
	61, 0, 62, 0, 63, 0, 64, 0, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 71, 70, 71, 70, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 501, 79, 501, 79, 
	81, 98, 0, 82, 0, 83, 0, 84, 
	0, 85, 0, 86, 0, 87, 0, 88, 
	0, 89, 0, 90, 0, 91, 0, 92, 
	0, 93, 0, 94, 0, 95, 0, 96, 
	0, 501, 97, 501, 97, 99, 122, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 0, 
	120, 0, 501, 121, 501, 121, 123, 0, 
	124, 0, 125, 0, 126, 0, 127, 0, 
	128, 0, 129, 0, 130, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	501, 140, 501, 140, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 149, 0, 150, 0, 151, 0, 
	501, 0, 153, 0, 154, 0, 155, 0, 
	156, 0, 157, 0, 158, 0, 159, 0, 
	160, 0, 161, 0, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 501, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	501, 180, 501, 180, 182, 0, 183, 0, 
	184, 0, 185, 0, 186, 0, 187, 0, 
	188, 0, 190, 189, 190, 189, 191, 0, 
	192, 0, 193, 0, 194, 0, 195, 0, 
	196, 0, 197, 0, 501, 198, 501, 198, 
	200, 0, 201, 0, 202, 216, 0, 203, 
	0, 503, 204, 503, 204, 503, 206, 204, 
	208, 508, 508, 207, 208, 508, 508, 207, 
	504, 204, 505, 209, 505, 211, 209, 213, 
	508, 509, 212, 213, 508, 509, 212, 506, 
	209, 504, 206, 204, 506, 211, 209, 217, 
	0, 218, 0, 219, 0, 220, 0, 221, 
	0, 222, 0, 510, 223, 510, 223, 510, 
	225, 223, 227, 515, 515, 226, 227, 515, 
	515, 226, 511, 223, 512, 228, 512, 230, 
	228, 232, 515, 516, 231, 232, 515, 516, 
	231, 513, 228, 511, 225, 223, 513, 230, 
	228, 236, 0, 237, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 242, 0, 243, 
	0, 244, 0, 245, 0, 517, 246, 517, 
	246, 53, 248, 0, 249, 0, 250, 0, 
	251, 0, 252, 0, 253, 0, 254, 0, 
	255, 0, 256, 0, 501, 257, 501, 257, 
	259, 0, 260, 0, 261, 0, 262, 0, 
	263, 0, 264, 0, 266, 265, 266, 265, 
	267, 0, 268, 0, 269, 0, 270, 0, 
	271, 0, 272, 0, 273, 0, 274, 0, 
	275, 0, 276, 0, 277, 0, 278, 0, 
	279, 0, 280, 0, 281, 0, 282, 0, 
	501, 283, 501, 283, 285, 0, 286, 298, 
	0, 287, 0, 288, 0, 289, 0, 290, 
	0, 291, 0, 292, 0, 293, 0, 294, 
	0, 295, 0, 296, 0, 501, 297, 501, 
	297, 299, 0, 300, 0, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 310, 0, 
	306, 0, 307, 0, 308, 0, 309, 0, 
	501, 0, 311, 0, 312, 0, 313, 0, 
	314, 0, 315, 0, 501, 0, 317, 0, 
	318, 0, 319, 0, 320, 0, 321, 0, 
	322, 0, 324, 323, 324, 323, 325, 324, 
	323, 324, 326, 323, 324, 327, 323, 324, 
	328, 323, 324, 329, 323, 330, 324, 323, 
	331, 323, 348, 518, 332, 518, 332, 324, 
	334, 326, 323, 336, 364, 523, 335, 336, 
	364, 523, 335, 337, 323, 341, 339, 338, 
	339, 338, 325, 324, 519, 323, 324, 334, 
	323, 339, 342, 338, 339, 343, 338, 339, 
	344, 338, 339, 345, 338, 346, 339, 338, 
	347, 338, 348, 518, 527, 332, 518, 349, 
	332, 518, 350, 332, 518, 351, 332, 518, 
	352, 332, 353, 518, 332, 520, 332, 518, 
	355, 349, 332, 357, 525, 526, 356, 357, 
	525, 526, 356, 521, 332, 339, 359, 342, 
	338, 361, 364, 524, 360, 361, 364, 524, 
	360, 362, 338, 341, 339, 522, 338, 339, 
	359, 338, 365, 364, 523, 335, 337, 326, 
	323, 337, 334, 323, 362, 359, 338, 337, 
	334, 326, 323, 521, 355, 332, 518, 355, 
	332, 372, 414, 0, 373, 0, 374, 0, 
	375, 0, 376, 0, 377, 0, 378, 397, 
	0, 379, 0, 380, 0, 381, 0, 382, 
	389, 0, 383, 0, 384, 383, 385, 0, 
	386, 0, 387, 0, 388, 0, 501, 388, 
	390, 0, 391, 393, 0, 392, 0, 501, 
	0, 394, 0, 395, 0, 396, 0, 501, 
	0, 398, 0, 399, 0, 400, 0, 401, 
	0, 528, 402, 528, 402, 528, 404, 402, 
	406, 533, 533, 405, 406, 533, 533, 405, 
	529, 402, 530, 407, 530, 409, 407, 411, 
	533, 534, 410, 411, 533, 534, 410, 531, 
	407, 529, 404, 402, 531, 409, 407, 415, 
	0, 416, 0, 417, 0, 418, 0, 419, 
	0, 420, 0, 421, 0, 422, 0, 423, 
	0, 424, 0, 425, 0, 501, 426, 501, 
	426, 428, 0, 429, 0, 430, 0, 431, 
	0, 432, 0, 434, 433, 434, 433, 435, 
	0, 436, 462, 0, 437, 0, 438, 0, 
	439, 0, 440, 0, 441, 0, 442, 0, 
	443, 0, 444, 461, 0, 445, 0, 446, 
	0, 447, 0, 448, 0, 449, 0, 450, 
	0, 451, 0, 452, 460, 0, 453, 0, 
	454, 0, 455, 0, 456, 0, 457, 0, 
	458, 0, 459, 0, 501, 0, 452, 460, 
	0, 444, 461, 0, 463, 0, 464, 0, 
	465, 0, 466, 0, 467, 0, 468, 0, 
	469, 0, 470, 0, 471, 0, 472, 0, 
	501, 473, 501, 473, 475, 0, 476, 0, 
	477, 0, 478, 0, 479, 0, 480, 0, 
	481, 0, 482, 0, 483, 0, 484, 0, 
	485, 0, 486, 0, 487, 0, 488, 0, 
	489, 0, 490, 0, 501, 491, 501, 491, 
	493, 0, 494, 0, 495, 0, 496, 0, 
	497, 0, 498, 0, 0, 500, 499, 0, 
	500, 499, 535, 500, 499, 52, 0, 59, 
	502, 54, 205, 503, 204, 210, 505, 209, 
	205, 503, 503, 204, 210, 505, 507, 209, 
	210, 505, 209, 214, 508, 508, 207, 215, 
	508, 509, 212, 224, 510, 223, 229, 512, 
	228, 224, 510, 510, 223, 229, 512, 514, 
	228, 229, 512, 228, 233, 515, 515, 226, 
	234, 515, 516, 231, 247, 0, 333, 324, 
	323, 340, 324, 323, 354, 518, 332, 358, 
	339, 338, 363, 339, 338, 366, 364, 523, 
	335, 367, 364, 524, 360, 368, 364, 523, 
	335, 369, 525, 526, 356, 370, 518, 332, 
	403, 528, 402, 408, 530, 407, 403, 528, 
	528, 402, 408, 530, 532, 407, 408, 530, 
	407, 412, 533, 533, 405, 413, 533, 534, 
	410, 536, 0, 535, 536, 0, 537, 535, 
	539, 54, 538, 538, 539, 54, 538, 538, 
	536, 56, 537, 535, 0
};

static readonly short[] _psi_trans_actions =  new short [] {
	107, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 187, 79, 81, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 105, 0, 0, 0, 109, 
	293, 3, 5, 217, 0, 0, 0, 115, 
	7, 9, 0, 11, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 193, 91, 93, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 273, 95, 196, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 261, 73, 178, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 265, 73, 181, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	245, 73, 166, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 85, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	249, 73, 169, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 184, 75, 77, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 257, 73, 175, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 199, 97, 99, 0, 99, 0, 0, 
	109, 202, 293, 3, 5, 99, 217, 0, 
	99, 0, 205, 0, 205, 0, 0, 109, 
	277, 293, 3, 5, 205, 217, 0, 205, 
	0, 99, 0, 0, 205, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 208, 101, 103, 0, 103, 
	0, 0, 109, 211, 293, 3, 5, 103, 
	217, 0, 103, 0, 214, 0, 214, 0, 
	0, 109, 285, 293, 3, 5, 214, 217, 
	0, 214, 0, 103, 0, 0, 214, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 87, 0, 253, 73, 172, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 269, 89, 190, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 154, 63, 65, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	233, 67, 157, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 121, 17, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 69, 69, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 71, 237, 71, 163, 0, 0, 
	0, 0, 0, 109, 3, 293, 3, 5, 
	0, 217, 0, 0, 0, 7, 115, 7, 
	9, 0, 0, 0, 11, 0, 0, 0, 
	0, 9, 0, 0, 9, 0, 0, 9, 
	0, 0, 9, 0, 0, 0, 9, 0, 
	9, 0, 71, 237, 160, 71, 163, 0, 
	0, 163, 0, 0, 163, 0, 0, 163, 
	0, 0, 0, 163, 0, 163, 0, 163, 
	0, 0, 0, 109, 241, 293, 3, 5, 
	163, 217, 0, 163, 0, 9, 0, 0, 
	0, 109, 112, 293, 3, 5, 9, 217, 
	0, 9, 0, 7, 115, 118, 7, 9, 
	0, 0, 5, 0, 217, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 163, 0, 0, 163, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 25, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 124, 29, 31, 0, 31, 0, 0, 
	109, 127, 293, 3, 5, 31, 217, 0, 
	31, 0, 130, 0, 130, 0, 0, 109, 
	221, 293, 3, 5, 130, 217, 0, 130, 
	0, 31, 0, 0, 130, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 148, 53, 55, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 136, 37, 39, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 142, 43, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 145, 47, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 51, 0, 49, 0, 
	0, 45, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	229, 41, 139, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 133, 33, 35, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 151, 57, 0, 
	59, 0, 61, 59, 0, 0, 0, 5, 
	217, 0, 0, 99, 0, 7, 281, 7, 
	0, 99, 11, 0, 7, 281, 118, 7, 
	0, 205, 0, 5, 99, 217, 0, 5, 
	205, 217, 0, 0, 103, 0, 7, 289, 
	7, 0, 103, 11, 0, 7, 289, 118, 
	7, 0, 214, 0, 5, 103, 217, 0, 
	5, 214, 217, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 71, 237, 71, 7, 
	115, 7, 0, 9, 0, 5, 0, 217, 
	0, 5, 9, 217, 0, 5, 0, 217, 
	0, 5, 163, 217, 0, 0, 163, 0, 
	0, 31, 0, 7, 225, 7, 0, 31, 
	11, 0, 7, 225, 118, 7, 0, 130, 
	0, 5, 31, 217, 0, 5, 130, 217, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	109, 3, 293, 3, 5, 0, 217, 0, 
	0, 0, 0, 0, 0
};

const int psi_start = 1;
const int psi_first_final = 501;
const int psi_error = 0;

const int psi_en_main = 1;


#line 328 "RawParser.rl"

		public bool Execute(ArraySegment<byte> buf)
		{
			int start = buf.Offset;
			
#line 848 "RawParser.cs"
	{
	cs = psi_start;
	}

#line 333 "RawParser.rl"
			byte[] data = buf.Array;
			int p = buf.Offset;
			int pe = buf.Offset + buf.Count;
			int eof = pe;
			
#line 859 "RawParser.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _psi_key_offsets[cs];
	_trans = (short)_psi_index_offsets[cs];

	_klen = _psi_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _psi_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _psi_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _psi_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _psi_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _psi_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	cs = _psi_trans_targs[_trans];

	if ( _psi_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _psi_trans_actions[_trans];
	_nacts = _psi_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _psi_actions[_acts++] )
		{
	case 0:
#line 43 "RawParser.rl"
	{
			if (DateTime != null) {
				var t = new DateTime(
					Number(data, p - 13, 4),
					Number(data, p - 19, 2),
					Number(data, p - 16, 2),
					Number(data, p - 6,  2),
					Number(data, p - 3,  2),
					Number(data, p,      2)
				);
				DateTime(t);
			}
		}
	break;
	case 1:
#line 60 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 2:
#line 60 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 3:
#line 60 "RawParser.rl"
	{ tmp3 = 0; tmp4 = 0; }
	break;
	case 4:
#line 60 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 5:
#line 60 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 6:
#line 60 "RawParser.rl"
	{
			if (Option != null) {
				Option(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				       (tmp3 == tmp4 && tmp4 == 0 ?
				           default(ArraySegment<byte>) :
				           new ArraySegment<byte>(data, tmp3, tmp4 - tmp3)));
			}
		}
	break;
	case 7:
#line 69 "RawParser.rl"
	{
			if (LogFileStart != null) {
				LogFileStart();
			}
		}
	break;
	case 8:
#line 75 "RawParser.rl"
	{
			if (LogFileEnd != null) {
				LogFileEnd();
			}
		}
	break;
	case 9:
#line 81 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 10:
#line 81 "RawParser.rl"
	{
			if (LoadingMap != null) {
				LoadingMap(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 11:
#line 87 "RawParser.rl"
	{
			if (ServerCVarsStart != null) {
				ServerCVarsStart();
			}
		}
	break;
	case 12:
#line 93 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 13:
#line 93 "RawParser.rl"
	{
			if (ServerCVarSet != null) {
				int name_start = start + 38;
				int name_len = tmp1 - name_start;
				int value_start = name_start + name_len + 5;
				int value_len = p - value_start;
				ServerCVarSet(new ArraySegment<byte>(data, name_start, name_len),
				              new ArraySegment<byte>(data, value_start, value_len));
			}
		}
	break;
	case 14:
#line 104 "RawParser.rl"
	{
			if (ServerCVarsEnd != null) {
				ServerCVarsEnd();
			}
		}
	break;
	case 15:
#line 110 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 16:
#line 110 "RawParser.rl"
	{
			if (p == pe - 1 && ServerSay != null) {
				ServerSay(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 17:
#line 116 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 18:
#line 116 "RawParser.rl"
	{
			if (WorldTrigger != null) {
				WorldTrigger(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 19:
#line 122 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 20:
#line 122 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 21:
#line 123 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 22:
#line 123 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 23:
#line 123 "RawParser.rl"
	{
			if (TeamTrigger != null) {
				TeamTrigger(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				            new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
		}
	break;
	case 24:
#line 129 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 25:
#line 129 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 26:
#line 129 "RawParser.rl"
	{ tmp5 = p; }
	break;
	case 27:
#line 129 "RawParser.rl"
	{ tmp6 = p; }
	break;
	case 28:
#line 129 "RawParser.rl"
	{
			if (TeamScore != null) {
				TeamScore(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				          Number(data, tmp3, tmp4 - tmp3),
				          Number(data, tmp5, tmp6 - tmp5));
			}
		}
	break;
	case 29:
#line 137 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 30:
#line 137 "RawParser.rl"
	{
			if (StartedMap != null) {
				StartedMap(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 31:
#line 143 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 32:
#line 143 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 33:
#line 143 "RawParser.rl"
	{
			if (Meta != null) {
				Meta(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					 new ArraySegment<byte>(data, p + 1, pe - p - 1));
			}
		}
	break;
	case 34:
#line 150 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 35:
#line 150 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 36:
#line 150 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 37:
#line 150 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 38:
#line 150 "RawParser.rl"
	{
			if (Kick != null) {
				Kick(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
		}
	break;
	case 39:
#line 157 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 40:
#line 157 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 41:
#line 157 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 42:
#line 157 "RawParser.rl"
	{
			if (Rcon != null) {
				Rcon(new ArraySegment<byte>(data, tmp1, tmp3 - tmp1 - 8),
				     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
		}
	break;
	case 43:
#line 164 "RawParser.rl"
	{ value_start = p; }
	break;
	case 44:
#line 164 "RawParser.rl"
	{
			value = new ArraySegment<byte>(data, value_start, p - value_start);
			value_start = 0;
		}
	break;
	case 45:
#line 169 "RawParser.rl"
	{ value_start = p; }
	break;
	case 46:
#line 169 "RawParser.rl"
	{
			target = new ArraySegment<byte>(data, value_start, p - value_start);
			value_start = 0;
		}
	break;
	case 47:
#line 174 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 48:
#line 174 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 49:
#line 175 "RawParser.rl"
	{
				if (PlayerConnect != null) {
					PlayerConnect(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					              value);
				}
			}
	break;
	case 50:
#line 181 "RawParser.rl"
	{
				if (PlayerDisconnect != null) {
					PlayerDisconnect(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 51:
#line 186 "RawParser.rl"
	{
				if (PlayerEnterGame != null) {
					PlayerEnterGame(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 52:
#line 191 "RawParser.rl"
	{
				if (PlayerJoinTeam != null) {
					PlayerJoinTeam(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					               value);
				}
			}
	break;
	case 53:
#line 198 "RawParser.rl"
	{ tmp3 = 0; tmp4 = 0; }
	break;
	case 54:
#line 198 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 55:
#line 198 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 56:
#line 199 "RawParser.rl"
	{
				if (tmp3 == 0) {
					if (PlayerTrigger != null) {
						PlayerTrigger(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
									  value);
					}
				} else {
					if (PlayerTriggerAgainst != null) {
						PlayerTriggerAgainst(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
						                     value,
						                     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
					}
				}
			}
	break;
	case 57:
#line 213 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 58:
#line 213 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 59:
#line 213 "RawParser.rl"
	{ tmp5 = p; }
	break;
	case 60:
#line 213 "RawParser.rl"
	{ tmp6 = p; }
	break;
	case 61:
#line 213 "RawParser.rl"
	{
				if (PlayerAttack != null) {
					PlayerAttack(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					             new ArraySegment<byte>(data, tmp3, tmp4 - tmp3),
					             new ArraySegment<byte>(data, tmp5, tmp6 - tmp5));
				}
			}
	break;
	case 62:
#line 220 "RawParser.rl"
	{
				if (PlayerKill != null) {
					PlayerKill(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					           target,
					           value);
				}
			}
	break;
	case 63:
#line 227 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 64:
#line 227 "RawParser.rl"
	{
				if (p == pe - 1 && PlayerSay != null) {
					PlayerSay(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					          new ArraySegment<byte>(data, tmp3, p - tmp3));
				}
			}
	break;
	case 65:
#line 233 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 66:
#line 233 "RawParser.rl"
	{
				if (p == pe - 1 && PlayerSayTeam != null) {
					PlayerSayTeam(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					              new ArraySegment<byte>(data, tmp3, p - tmp3));
				}
			}
	break;
	case 67:
#line 239 "RawParser.rl"
	{
				if (PlayerValidate != null) {
					PlayerValidate(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 68:
#line 244 "RawParser.rl"
	{
				if (PlayerNameChange != null) {
					PlayerNameChange(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					           value);
				}
			}
	break;
	case 69:
#line 250 "RawParser.rl"
	{
				if (PlayerSuicide != null) {
					PlayerSuicide(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					        value);
				}
			}
	break;
	case 70:
#line 273 "RawParser.rl"
	{
				if (End != null) {
					End();
				}
			}
	break;
#line 1379 "RawParser.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 338 "RawParser.rl"
			return p == pe;
		}
	}
}
