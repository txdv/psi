
#line 1 "RawParser.rl"
using System;
using System.Collections.Generic;
using System.Text;

namespace Psi
{
	public class RawParser
	{
		ArraySegment<byte> value;
		ArraySegment<byte> target;

		int tmp1 = 0;
		int tmp2 = 0;
		int tmp3 = 0;
		int tmp4 = 0;
		int tmp5 = 0;
		int tmp6 = 0;

		int value_start;

		public static int Number(ArraySegment<byte> arr)
		{
			return Number(arr.Array, arr.Offset, arr.Count);
		}

		public static int Number(byte[] data, int start, int count)
		{
			int res = 0;
			for (int i = 0; i < count; i++) {
				res *= 10;
				res += (data[start + i] - '0');
			}
			return res;
		}

		
#line 280 "RawParser.rl"


		public event Action<DateTime> DateTime;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> Option;

		#region Log Message Types

		public event Action<ArraySegment<byte>, ArraySegment<byte>> Meta;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> Kick;
		public event Action<bool, ArraySegment<byte>, ArraySegment<byte>> Rcon;

		public event Action LogFileStart;
		public event Action LogFileEnd;

		public event Action ServerCVarsStart;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> ServerCVarSet;
		public event Action ServerCVarsEnd;

		public event Action<ArraySegment<byte>> ServerSay;

		public event Action<ArraySegment<byte>> LoadingMap;
		public event Action<ArraySegment<byte>> StartedMap;

		public event Action<ArraySegment<byte>> WorldTrigger;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> TeamTrigger;
		public event Action<ArraySegment<byte>, int, int> TeamScore;

		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerConnect;
		public event Action<ArraySegment<byte>> PlayerDisconnect;
		public event Action<ArraySegment<byte>> PlayerEnterGame;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerJoinTeam;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerTrigger;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerTriggerAgainst;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerAttack;
		public event Action<ArraySegment<byte>, ArraySegment<byte>, ArraySegment<byte>> PlayerKill;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSay;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSayTeam;
		public event Action<ArraySegment<byte>> PlayerValidate;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerNameChange;
		public event Action<ArraySegment<byte>, ArraySegment<byte>> PlayerSuicide;

		#endregion

		public event Action End;

		int cs;

		
#line 91 "RawParser.cs"
static readonly sbyte[] _psi_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	4, 1, 5, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 24, 1, 25, 1, 
	26, 1, 27, 1, 28, 1, 29, 1, 
	30, 1, 31, 1, 32, 1, 33, 1, 
	34, 1, 35, 1, 36, 1, 39, 1, 
	40, 1, 41, 1, 44, 1, 46, 1, 
	47, 1, 48, 1, 49, 1, 51, 1, 
	52, 1, 54, 1, 55, 1, 58, 1, 
	59, 1, 60, 1, 64, 1, 65, 1, 
	66, 1, 67, 1, 68, 1, 71, 2, 
	1, 2, 2, 1, 5, 2, 4, 5, 
	2, 4, 6, 2, 9, 10, 2, 15, 
	16, 2, 16, 1, 2, 16, 5, 2, 
	17, 18, 2, 19, 20, 2, 22, 23, 
	2, 24, 25, 2, 26, 27, 2, 29, 
	30, 2, 31, 32, 2, 34, 35, 2, 
	37, 38, 2, 41, 6, 2, 42, 43, 
	2, 45, 50, 2, 45, 53, 2, 45, 
	57, 2, 45, 63, 2, 45, 69, 2, 
	45, 70, 2, 46, 47, 2, 48, 49, 
	2, 56, 57, 2, 58, 59, 2, 61, 
	62, 2, 64, 65, 2, 65, 1, 2, 
	65, 5, 2, 66, 67, 2, 67, 1, 
	2, 67, 5, 3, 2, 3, 6, 3, 
	16, 1, 5, 3, 16, 4, 5, 3, 
	21, 22, 23, 3, 36, 37, 38, 3, 
	41, 42, 43, 3, 42, 43, 1, 3, 
	44, 45, 50, 3, 44, 45, 53, 3, 
	44, 45, 57, 3, 44, 45, 63, 3, 
	44, 45, 69, 3, 44, 45, 70, 3, 
	55, 56, 57, 3, 60, 61, 62, 3, 
	65, 1, 5, 3, 65, 4, 5, 3, 
	67, 1, 5, 3, 67, 4, 5, 4, 
	1, 2, 3, 6
};

static readonly short[] _psi_key_offsets =  new short [] {
	0, 0, 1, 2, 4, 6, 7, 9, 
	11, 12, 14, 16, 18, 20, 21, 22, 
	23, 25, 27, 28, 30, 32, 33, 35, 
	37, 38, 39, 48, 49, 50, 51, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 84, 86, 
	87, 88, 89, 90, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 111, 
	112, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 237, 238, 239, 240, 242, 245, 
	248, 249, 250, 252, 255, 258, 259, 261, 
	263, 264, 265, 266, 267, 268, 269, 270, 
	271, 273, 276, 279, 280, 281, 283, 286, 
	289, 290, 292, 294, 295, 296, 297, 298, 
	299, 300, 301, 302, 303, 304, 305, 306, 
	308, 309, 310, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	334, 336, 338, 340, 342, 343, 345, 346, 
	349, 352, 355, 356, 358, 359, 362, 364, 
	366, 368, 370, 372, 374, 375, 378, 380, 
	382, 384, 386, 388, 389, 392, 395, 398, 
	399, 402, 405, 408, 409, 412, 414, 417, 
	419, 421, 423, 426, 428, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 440, 
	441, 442, 443, 444, 445, 446, 447, 448, 
	449, 450, 451, 452, 453, 454, 455, 456, 
	457, 459, 460, 461, 462, 463, 464, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	474, 475, 476, 477, 479, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	492, 493, 494, 495, 496, 497, 499, 500, 
	501, 502, 504, 505, 506, 507, 508, 509, 
	510, 511, 512, 514, 515, 516, 517, 518, 
	519, 520, 521, 522, 523, 524, 525, 526, 
	528, 531, 534, 535, 536, 538, 541, 544, 
	545, 547, 549, 550, 551, 552, 553, 554, 
	555, 556, 557, 558, 559, 560, 561, 562, 
	563, 564, 565, 566, 567, 568, 569, 570, 
	572, 573, 574, 575, 576, 577, 578, 579, 
	582, 583, 584, 585, 586, 587, 588, 589, 
	592, 593, 594, 595, 596, 597, 598, 599, 
	600, 603, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 626, 627, 
	628, 629, 630, 631, 632, 633, 634, 635, 
	636, 637, 638, 639, 640, 641, 642, 644, 
	646, 648, 649, 651, 653, 655, 658, 661, 
	663, 666, 669, 671, 673, 676, 679, 681, 
	684, 687, 688, 690, 692, 694, 696, 698, 
	701, 704, 707, 710, 712, 714, 716, 719, 
	722, 724, 727, 730, 732, 735, 738, 741
};

static readonly char[] _psi_trans_keys =  new char [] {
	'\u004c', '\u0020', '\u0030', '\u0039', '\u0030', '\u0039', '\u002f', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u002f', '\u0030', '\u0039', '\u0030', '\u0039', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u0020', '\u002d', '\u0020', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u003a', '\u0030', '\u0039', '\u0030', '\u0039', 
	'\u003a', '\u0030', '\u0039', '\u0030', '\u0039', '\u003a', '\u0020', '\u0022', 
	'\u0042', '\u004b', '\u004c', '\u0052', '\u0053', '\u0054', '\u0057', '\u005b', 
	'\u0022', '\u0022', '\u0020', '\u0053', '\u0061', '\u0063', '\u0064', '\u0065', 
	'\u006a', '\u006b', '\u0073', '\u0074', '\u0054', '\u0045', '\u0041', '\u004d', 
	'\u0020', '\u0055', '\u0053', '\u0045', '\u0052', '\u0049', '\u0044', '\u0020', 
	'\u0076', '\u0061', '\u006c', '\u0069', '\u0064', '\u0061', '\u0074', '\u0065', 
	'\u0064', '\u0028', '\u0020', '\u0029', '\u0020', '\u0029', '\u0022', '\u0022', 
	'\u0022', '\u0029', '\u0022', '\u0028', '\u0074', '\u0074', '\u0061', '\u0063', 
	'\u006b', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', 
	'\u0077', '\u0069', '\u0074', '\u0068', '\u0020', '\u0022', '\u0022', '\u0022', 
	'\u0068', '\u006f', '\u0061', '\u006e', '\u0067', '\u0065', '\u0064', '\u0020', 
	'\u006e', '\u0061', '\u006d', '\u0065', '\u0020', '\u0074', '\u006f', '\u0020', 
	'\u0022', '\u0022', '\u0022', '\u006d', '\u006e', '\u006d', '\u0069', '\u0074', 
	'\u0074', '\u0065', '\u0064', '\u0020', '\u0073', '\u0075', '\u0069', '\u0063', 
	'\u0069', '\u0064', '\u0065', '\u0020', '\u0077', '\u0069', '\u0074', '\u0068', 
	'\u0020', '\u0022', '\u0022', '\u0022', '\u006e', '\u0065', '\u0063', '\u0074', 
	'\u0065', '\u0064', '\u002c', '\u0020', '\u0061', '\u0064', '\u0064', '\u0072', 
	'\u0065', '\u0073', '\u0073', '\u0020', '\u0022', '\u0022', '\u0022', '\u0069', 
	'\u0073', '\u0063', '\u006f', '\u006e', '\u006e', '\u0065', '\u0063', '\u0074', 
	'\u0065', '\u0064', '\u006e', '\u0074', '\u0065', '\u0072', '\u0065', '\u0064', 
	'\u0020', '\u0074', '\u0068', '\u0065', '\u0020', '\u0067', '\u0061', '\u006d', 
	'\u0065', '\u006f', '\u0069', '\u006e', '\u0065', '\u0064', '\u0020', '\u0074', 
	'\u0065', '\u0061', '\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0069', 
	'\u006c', '\u006c', '\u0065', '\u0064', '\u0020', '\u0022', '\u0022', '\u0022', 
	'\u0020', '\u0077', '\u0069', '\u0074', '\u0068', '\u0020', '\u0022', '\u0022', 
	'\u0022', '\u0061', '\u0079', '\u0020', '\u005f', '\u0022', '\u0022', '\u0022', 
	'\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0022', '\u0022', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0022', '\u0022', '\u0028', '\u0022', '\u0028', '\u0074', 
	'\u0065', '\u0061', '\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0022', 
	'\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', 
	'\u0022', '\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0022', '\u0028', '\u0022', '\u0028', '\u0072', '\u0069', 
	'\u0067', '\u0067', '\u0065', '\u0072', '\u0065', '\u0064', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u0028', '\u0061', '\u0067', '\u0061', '\u0069', '\u006e', 
	'\u0073', '\u0074', '\u0020', '\u0022', '\u0022', '\u0022', '\u0061', '\u0064', 
	'\u0020', '\u0052', '\u0063', '\u006f', '\u006e', '\u003a', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u0020', '\u0022', '\u0022', '\u0066', '\u0022', '\u0072', 
	'\u0022', '\u006f', '\u0022', '\u006d', '\u0020', '\u0022', '\u0022', '\u0020', 
	'\u0022', '\u0022', '\u0022', '\u0028', '\u0066', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0029', '\u0022', '\u0020', '\u0022', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0022', '\u0028', '\u0022', '\u0066', '\u0022', '\u0072', 
	'\u0022', '\u006f', '\u0022', '\u006d', '\u0020', '\u0022', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0022', '\u0066', '\u0022', '\u0072', '\u0022', '\u006f', 
	'\u0022', '\u006d', '\u0020', '\u0022', '\u0022', '\u0022', '\u0028', '\u0066', 
	'\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', '\u0022', 
	'\u0028', '\u0066', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0022', '\u0020', '\u0022', '\u0029', '\u0022', '\u0028', '\u0020', '\u0022', 
	'\u0029', '\u0022', '\u0066', '\u0022', '\u0028', '\u0022', '\u0028', '\u0022', 
	'\u0028', '\u0066', '\u0022', '\u0028', '\u0022', '\u0028', '\u0069', '\u0063', 
	'\u006b', '\u003a', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', '\u0077', 
	'\u0061', '\u0073', '\u0020', '\u006b', '\u0069', '\u0063', '\u006b', '\u0065', 
	'\u0064', '\u0020', '\u0062', '\u0079', '\u0020', '\u0022', '\u0022', '\u0022', 
	'\u006f', '\u0061', '\u0067', '\u0064', '\u0069', '\u006e', '\u0067', '\u0020', 
	'\u006d', '\u0061', '\u0070', '\u0020', '\u0022', '\u0022', '\u0022', '\u0020', 
	'\u0066', '\u0069', '\u006c', '\u0065', '\u0020', '\u0063', '\u0073', '\u006c', 
	'\u006f', '\u0073', '\u0065', '\u0064', '\u0074', '\u0061', '\u0072', '\u0074', 
	'\u0065', '\u0064', '\u0065', '\u0074', '\u0072', '\u0076', '\u0065', '\u0072', 
	'\u0020', '\u0063', '\u0073', '\u0076', '\u0061', '\u0072', '\u0020', '\u0073', 
	'\u0022', '\u0022', '\u0020', '\u003d', '\u0020', '\u0022', '\u0022', '\u0020', 
	'\u0065', '\u0073', '\u006e', '\u0064', '\u0074', '\u0061', '\u0072', '\u0074', 
	'\u0061', '\u0079', '\u0020', '\u0022', '\u0022', '\u0022', '\u0022', '\u0028', 
	'\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0022', '\u0022', 
	'\u0022', '\u0028', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0022', '\u0022', '\u0028', '\u0022', '\u0028', '\u0061', '\u0072', '\u0074', 
	'\u0065', '\u0064', '\u0020', '\u006d', '\u0061', '\u0070', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u0065', '\u0061', '\u006d', '\u0020', '\u0022', '\u0022', 
	'\u0022', '\u0020', '\u0073', '\u0074', '\u0063', '\u006f', '\u0072', '\u0065', 
	'\u0064', '\u0020', '\u0022', '\u0022', '\u0030', '\u0039', '\u0020', '\u0077', 
	'\u0069', '\u0074', '\u0068', '\u0020', '\u0022', '\u0022', '\u0030', '\u0039', 
	'\u0020', '\u0070', '\u006c', '\u0061', '\u0079', '\u0065', '\u0072', '\u0073', 
	'\u0022', '\u0030', '\u0039', '\u0022', '\u0030', '\u0039', '\u0072', '\u0069', 
	'\u0067', '\u0067', '\u0065', '\u0072', '\u0065', '\u0064', '\u0020', '\u0022', 
	'\u0022', '\u0022', '\u006f', '\u0072', '\u006c', '\u0064', '\u0020', '\u0074', 
	'\u0072', '\u0069', '\u0067', '\u0067', '\u0065', '\u0072', '\u0065', '\u0064', 
	'\u0020', '\u0022', '\u0022', '\u0022', '\u004d', '\u0045', '\u0054', '\u0041', 
	'\u005d', '\u0020', '\u0020', '\u003a', '\u0020', '\u003a', '\u0020', '\u003a', 
	'\u0020', '\u0020', '\u0029', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0020', 
	'\u0022', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', 
	'\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', 
	'\u0020', '\u0022', '\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0020', '\u0022', '\u0029', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0020', '\u0022', '\u0028', '\u0020', 
	'\u0022', '\u0029', '\u0020', '\u0022', '\u0029', '\u0020', '\u0022', '\u0028', 
	(char) 0
};

static readonly sbyte[] _psi_single_lengths =  new sbyte [] {
	0, 1, 1, 0, 0, 1, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 0, 0, 1, 0, 0, 
	1, 1, 9, 1, 1, 1, 9, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 2, 3, 3, 
	1, 1, 2, 3, 3, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 3, 3, 1, 1, 2, 3, 3, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 2, 2, 1, 2, 1, 3, 
	3, 3, 1, 2, 1, 3, 2, 2, 
	2, 2, 2, 2, 1, 3, 2, 2, 
	2, 2, 2, 1, 3, 3, 3, 1, 
	3, 3, 3, 1, 3, 2, 3, 2, 
	2, 2, 3, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 3, 1, 1, 2, 3, 3, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 1, 2, 2, 2, 3, 3, 2, 
	3, 3, 2, 2, 3, 3, 2, 3, 
	3, 1, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 3, 3, 
	2, 3, 3, 2, 3, 3, 3, 3
};

static readonly sbyte[] _psi_range_lengths =  new sbyte [] {
	0, 0, 0, 1, 1, 0, 1, 1, 
	0, 1, 1, 1, 1, 0, 0, 0, 
	1, 1, 0, 1, 1, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static readonly short[] _psi_index_offsets =  new short [] {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 48, 50, 60, 62, 64, 66, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 114, 116, 118, 120, 123, 126, 
	128, 130, 132, 134, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 301, 303, 305, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 331, 333, 335, 337, 
	339, 341, 343, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 363, 365, 367, 369, 
	371, 373, 375, 377, 379, 381, 383, 385, 
	387, 389, 391, 393, 395, 397, 399, 401, 
	403, 405, 407, 409, 411, 413, 415, 417, 
	419, 421, 424, 426, 428, 430, 433, 437, 
	441, 443, 445, 448, 452, 456, 458, 461, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 483, 487, 491, 493, 495, 498, 502, 
	506, 508, 511, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 588, 
	591, 594, 597, 600, 603, 605, 608, 610, 
	614, 618, 622, 624, 627, 629, 633, 636, 
	639, 642, 645, 648, 651, 653, 657, 660, 
	663, 666, 669, 672, 674, 678, 682, 686, 
	688, 692, 696, 700, 702, 706, 709, 713, 
	716, 719, 722, 726, 729, 732, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 772, 774, 776, 778, 780, 782, 784, 
	786, 789, 791, 793, 795, 797, 799, 801, 
	803, 805, 807, 809, 811, 813, 815, 817, 
	819, 821, 823, 825, 828, 830, 832, 834, 
	836, 838, 840, 842, 844, 846, 848, 850, 
	853, 855, 857, 859, 861, 863, 866, 868, 
	870, 872, 875, 877, 879, 881, 883, 885, 
	887, 889, 891, 894, 896, 898, 900, 902, 
	904, 906, 908, 910, 912, 914, 916, 918, 
	921, 925, 929, 931, 933, 936, 940, 944, 
	946, 949, 952, 954, 956, 958, 960, 962, 
	964, 966, 968, 970, 972, 974, 976, 978, 
	980, 982, 984, 986, 988, 990, 992, 994, 
	997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 
	1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 
	1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 
	1047, 1050, 1053, 1055, 1057, 1059, 1061, 1063, 
	1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 
	1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 
	1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 
	1113, 1115, 1117, 1119, 1121, 1123, 1125, 1128, 
	1131, 1134, 1136, 1139, 1142, 1145, 1149, 1153, 
	1156, 1160, 1164, 1167, 1170, 1174, 1178, 1181, 
	1185, 1189, 1191, 1194, 1197, 1200, 1203, 1206, 
	1210, 1214, 1218, 1222, 1225, 1228, 1231, 1235, 
	1239, 1242, 1246, 1250, 1253, 1257, 1261, 1265
};

static readonly short[] _psi_trans_targs =  new short [] {
	2, 0, 3, 0, 4, 0, 5, 0, 
	6, 0, 7, 0, 8, 0, 9, 0, 
	10, 0, 11, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 0, 
	18, 0, 19, 0, 20, 0, 21, 0, 
	22, 0, 23, 0, 24, 0, 25, 0, 
	26, 0, 27, 258, 317, 343, 262, 375, 
	431, 478, 496, 0, 29, 28, 29, 28, 
	30, 0, 31, 60, 80, 141, 152, 167, 
	181, 199, 235, 0, 32, 0, 33, 0, 
	34, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 505, 0, 53, 0, 
	55, 506, 54, 55, 506, 54, 56, 0, 
	58, 57, 58, 57, 505, 0, 56, 53, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 71, 70, 71, 70, 72, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 505, 79, 505, 
	79, 81, 98, 0, 82, 0, 83, 0, 
	84, 0, 85, 0, 86, 0, 87, 0, 
	88, 0, 89, 0, 90, 0, 91, 0, 
	92, 0, 93, 0, 94, 0, 95, 0, 
	96, 0, 505, 97, 505, 97, 99, 122, 
	0, 100, 0, 101, 0, 102, 0, 103, 
	0, 104, 0, 105, 0, 106, 0, 107, 
	0, 108, 0, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 116, 0, 117, 0, 118, 0, 119, 
	0, 120, 0, 505, 121, 505, 121, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 135, 
	0, 136, 0, 137, 0, 138, 0, 139, 
	0, 505, 140, 505, 140, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 147, 
	0, 148, 0, 149, 0, 150, 0, 151, 
	0, 505, 0, 153, 0, 154, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 164, 0, 165, 0, 166, 0, 505, 
	0, 168, 0, 169, 0, 170, 0, 171, 
	0, 172, 0, 173, 0, 174, 0, 175, 
	0, 176, 0, 177, 0, 178, 0, 179, 
	0, 505, 180, 505, 180, 182, 0, 183, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 0, 190, 189, 190, 189, 191, 
	0, 192, 0, 193, 0, 194, 0, 195, 
	0, 196, 0, 197, 0, 505, 198, 505, 
	198, 200, 0, 201, 0, 202, 216, 0, 
	203, 0, 507, 204, 507, 204, 507, 206, 
	204, 208, 512, 512, 207, 208, 512, 512, 
	207, 508, 204, 509, 209, 509, 211, 209, 
	213, 512, 513, 212, 213, 512, 513, 212, 
	510, 209, 508, 206, 204, 510, 211, 209, 
	217, 0, 218, 0, 219, 0, 220, 0, 
	221, 0, 222, 0, 514, 223, 514, 223, 
	514, 225, 223, 227, 519, 519, 226, 227, 
	519, 519, 226, 515, 223, 516, 228, 516, 
	230, 228, 232, 519, 520, 231, 232, 519, 
	520, 231, 517, 228, 515, 225, 223, 517, 
	230, 228, 236, 0, 237, 0, 238, 0, 
	239, 0, 240, 0, 241, 0, 242, 0, 
	243, 0, 244, 0, 245, 0, 521, 246, 
	521, 246, 53, 248, 0, 249, 0, 250, 
	0, 251, 0, 252, 0, 253, 0, 254, 
	0, 255, 0, 256, 0, 505, 257, 505, 
	257, 259, 0, 260, 0, 261, 0, 262, 
	0, 263, 0, 264, 0, 265, 0, 266, 
	0, 267, 0, 268, 0, 270, 269, 270, 
	269, 271, 270, 269, 270, 272, 269, 270, 
	273, 269, 270, 274, 269, 270, 275, 269, 
	276, 270, 269, 277, 269, 294, 522, 278, 
	522, 278, 270, 280, 272, 269, 282, 310, 
	527, 281, 282, 310, 527, 281, 283, 269, 
	287, 285, 284, 285, 284, 271, 270, 523, 
	269, 270, 280, 269, 285, 288, 284, 285, 
	289, 284, 285, 290, 284, 285, 291, 284, 
	292, 285, 284, 293, 284, 294, 522, 531, 
	278, 522, 295, 278, 522, 296, 278, 522, 
	297, 278, 522, 298, 278, 299, 522, 278, 
	524, 278, 522, 301, 295, 278, 303, 529, 
	530, 302, 303, 529, 530, 302, 525, 278, 
	285, 305, 288, 284, 307, 310, 528, 306, 
	307, 310, 528, 306, 308, 284, 287, 285, 
	526, 284, 285, 305, 284, 311, 310, 527, 
	281, 283, 272, 269, 283, 280, 269, 308, 
	305, 284, 283, 280, 272, 269, 525, 301, 
	278, 522, 301, 278, 318, 0, 319, 0, 
	320, 0, 321, 0, 322, 0, 323, 0, 
	325, 324, 325, 324, 326, 0, 327, 0, 
	328, 0, 329, 0, 330, 0, 331, 0, 
	332, 0, 333, 0, 334, 0, 335, 0, 
	336, 0, 337, 0, 338, 0, 339, 0, 
	340, 0, 341, 0, 505, 342, 505, 342, 
	344, 0, 345, 357, 0, 346, 0, 347, 
	0, 348, 0, 349, 0, 350, 0, 351, 
	0, 352, 0, 353, 0, 354, 0, 355, 
	0, 505, 356, 505, 356, 358, 0, 359, 
	0, 360, 0, 361, 0, 362, 0, 363, 
	0, 364, 369, 0, 365, 0, 366, 0, 
	367, 0, 368, 0, 505, 0, 370, 0, 
	371, 0, 372, 0, 373, 0, 374, 0, 
	505, 0, 376, 418, 0, 377, 0, 378, 
	0, 379, 0, 380, 0, 381, 0, 382, 
	401, 0, 383, 0, 384, 0, 385, 0, 
	386, 393, 0, 387, 0, 388, 387, 389, 
	0, 390, 0, 391, 0, 392, 0, 505, 
	392, 394, 0, 395, 397, 0, 396, 0, 
	505, 0, 398, 0, 399, 0, 400, 0, 
	505, 0, 402, 0, 403, 0, 404, 0, 
	405, 0, 532, 406, 532, 406, 532, 408, 
	406, 410, 537, 537, 409, 410, 537, 537, 
	409, 533, 406, 534, 411, 534, 413, 411, 
	415, 537, 538, 414, 415, 537, 538, 414, 
	535, 411, 533, 408, 406, 535, 413, 411, 
	419, 0, 420, 0, 421, 0, 422, 0, 
	423, 0, 424, 0, 425, 0, 426, 0, 
	427, 0, 428, 0, 429, 0, 505, 430, 
	505, 430, 432, 0, 433, 0, 434, 0, 
	435, 0, 436, 0, 438, 437, 438, 437, 
	439, 0, 440, 466, 0, 441, 0, 442, 
	0, 443, 0, 444, 0, 445, 0, 446, 
	0, 447, 0, 448, 465, 0, 449, 0, 
	450, 0, 451, 0, 452, 0, 453, 0, 
	454, 0, 455, 0, 456, 464, 0, 457, 
	0, 458, 0, 459, 0, 460, 0, 461, 
	0, 462, 0, 463, 0, 505, 0, 456, 
	464, 0, 448, 465, 0, 467, 0, 468, 
	0, 469, 0, 470, 0, 471, 0, 472, 
	0, 473, 0, 474, 0, 475, 0, 476, 
	0, 505, 477, 505, 477, 479, 0, 480, 
	0, 481, 0, 482, 0, 483, 0, 484, 
	0, 485, 0, 486, 0, 487, 0, 488, 
	0, 489, 0, 490, 0, 491, 0, 492, 
	0, 493, 0, 494, 0, 505, 495, 505, 
	495, 497, 0, 498, 0, 499, 0, 500, 
	0, 501, 0, 502, 0, 0, 504, 503, 
	0, 504, 503, 539, 504, 503, 52, 0, 
	59, 506, 54, 205, 507, 204, 210, 509, 
	209, 205, 507, 507, 204, 210, 509, 511, 
	209, 210, 509, 209, 214, 512, 512, 207, 
	215, 512, 513, 212, 224, 514, 223, 229, 
	516, 228, 224, 514, 514, 223, 229, 516, 
	518, 228, 229, 516, 228, 233, 519, 519, 
	226, 234, 519, 520, 231, 247, 0, 279, 
	270, 269, 286, 270, 269, 300, 522, 278, 
	304, 285, 284, 309, 285, 284, 312, 310, 
	527, 281, 313, 310, 528, 306, 314, 310, 
	527, 281, 315, 529, 530, 302, 316, 522, 
	278, 407, 532, 406, 412, 534, 411, 407, 
	532, 532, 406, 412, 534, 536, 411, 412, 
	534, 411, 416, 537, 537, 409, 417, 537, 
	538, 414, 540, 0, 539, 540, 0, 541, 
	539, 543, 54, 542, 542, 543, 54, 542, 
	542, 540, 56, 541, 539, 0
};

static readonly short[] _psi_trans_actions =  new short [] {
	109, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 189, 81, 83, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 107, 0, 0, 0, 
	111, 295, 3, 5, 219, 0, 0, 0, 
	117, 7, 9, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 195, 93, 95, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 275, 97, 198, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 263, 75, 180, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 267, 75, 183, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 247, 75, 168, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 85, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 251, 75, 171, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 186, 77, 79, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 259, 75, 177, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 201, 99, 101, 0, 101, 0, 
	0, 111, 204, 295, 3, 5, 101, 219, 
	0, 101, 0, 207, 0, 207, 0, 0, 
	111, 279, 295, 3, 5, 207, 219, 0, 
	207, 0, 101, 0, 0, 207, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 210, 103, 105, 0, 
	105, 0, 0, 111, 213, 295, 3, 5, 
	105, 219, 0, 105, 0, 216, 0, 216, 
	0, 0, 111, 287, 295, 3, 5, 216, 
	219, 0, 216, 0, 105, 0, 0, 216, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 89, 0, 255, 75, 
	174, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 271, 91, 192, 
	0, 0, 0, 0, 0, 0, 0, 69, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 71, 71, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 73, 239, 73, 
	165, 0, 0, 0, 0, 0, 111, 3, 
	295, 3, 5, 0, 219, 0, 0, 0, 
	7, 117, 7, 9, 0, 0, 0, 11, 
	0, 0, 0, 0, 9, 0, 0, 9, 
	0, 0, 9, 0, 0, 9, 0, 0, 
	0, 9, 0, 9, 0, 73, 239, 162, 
	73, 165, 0, 0, 165, 0, 0, 165, 
	0, 0, 165, 0, 0, 0, 165, 0, 
	165, 0, 165, 0, 0, 0, 111, 243, 
	295, 3, 5, 165, 219, 0, 165, 0, 
	9, 0, 0, 0, 111, 114, 295, 3, 
	5, 9, 219, 0, 9, 0, 7, 117, 
	120, 7, 9, 0, 0, 5, 0, 219, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 165, 0, 
	0, 165, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	156, 63, 65, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 235, 67, 159, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 123, 17, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 126, 29, 31, 0, 31, 0, 
	0, 111, 129, 295, 3, 5, 31, 219, 
	0, 31, 0, 132, 0, 132, 0, 0, 
	111, 223, 295, 3, 5, 132, 219, 0, 
	132, 0, 31, 0, 0, 132, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 150, 53, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 138, 37, 39, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 144, 43, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 147, 47, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 51, 0, 49, 
	0, 0, 45, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 231, 41, 141, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 135, 33, 35, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 153, 57, 
	0, 59, 0, 61, 59, 0, 0, 0, 
	5, 219, 0, 0, 101, 0, 7, 283, 
	7, 0, 101, 11, 0, 7, 283, 120, 
	7, 0, 207, 0, 5, 101, 219, 0, 
	5, 207, 219, 0, 0, 105, 0, 7, 
	291, 7, 0, 105, 11, 0, 7, 291, 
	120, 7, 0, 216, 0, 5, 105, 219, 
	0, 5, 216, 219, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 73, 239, 73, 
	7, 117, 7, 0, 9, 0, 5, 0, 
	219, 0, 5, 9, 219, 0, 5, 0, 
	219, 0, 5, 165, 219, 0, 0, 165, 
	0, 0, 31, 0, 7, 227, 7, 0, 
	31, 11, 0, 7, 227, 120, 7, 0, 
	132, 0, 5, 31, 219, 0, 5, 132, 
	219, 0, 0, 0, 0, 0, 0, 0, 
	0, 111, 3, 295, 3, 5, 0, 219, 
	0, 0, 0, 0, 0, 0
};

const int psi_start = 1;
const int psi_first_final = 505;
const int psi_error = 0;

const int psi_en_main = 1;


#line 330 "RawParser.rl"

		public bool Execute(ArraySegment<byte> buf)
		{
			int start = buf.Offset;
			
#line 851 "RawParser.cs"
	{
	cs = psi_start;
	}

#line 335 "RawParser.rl"
			byte[] data = buf.Array;
			int p = buf.Offset;
			int pe = buf.Offset + buf.Count;
			int eof = pe;
			
#line 862 "RawParser.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _psi_key_offsets[cs];
	_trans = (short)_psi_index_offsets[cs];

	_klen = _psi_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _psi_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _psi_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _psi_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _psi_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _psi_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	cs = _psi_trans_targs[_trans];

	if ( _psi_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _psi_trans_actions[_trans];
	_nacts = _psi_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _psi_actions[_acts++] )
		{
	case 0:
#line 43 "RawParser.rl"
	{
			if (DateTime != null) {
				var t = new DateTime(
					Number(data, p - 13, 4),
					Number(data, p - 19, 2),
					Number(data, p - 16, 2),
					Number(data, p - 6,  2),
					Number(data, p - 3,  2),
					Number(data, p,      2)
				);
				DateTime(t);
			}
		}
	break;
	case 1:
#line 60 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 2:
#line 60 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 3:
#line 60 "RawParser.rl"
	{ tmp3 = 0; tmp4 = 0; }
	break;
	case 4:
#line 60 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 5:
#line 60 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 6:
#line 60 "RawParser.rl"
	{
			if (Option != null) {
				Option(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				       (tmp3 == tmp4 && tmp4 == 0 ?
				           default(ArraySegment<byte>) :
				           new ArraySegment<byte>(data, tmp3, tmp4 - tmp3)));
			}
		}
	break;
	case 7:
#line 69 "RawParser.rl"
	{
			if (LogFileStart != null) {
				LogFileStart();
			}
		}
	break;
	case 8:
#line 75 "RawParser.rl"
	{
			if (LogFileEnd != null) {
				LogFileEnd();
			}
		}
	break;
	case 9:
#line 81 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 10:
#line 81 "RawParser.rl"
	{
			if (LoadingMap != null) {
				LoadingMap(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 11:
#line 87 "RawParser.rl"
	{
			if (ServerCVarsStart != null) {
				ServerCVarsStart();
			}
		}
	break;
	case 12:
#line 93 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 13:
#line 93 "RawParser.rl"
	{
			if (ServerCVarSet != null) {
				int name_start = start + 38;
				int name_len = tmp1 - name_start;
				int value_start = name_start + name_len + 5;
				int value_len = p - value_start;
				ServerCVarSet(new ArraySegment<byte>(data, name_start, name_len),
				              new ArraySegment<byte>(data, value_start, value_len));
			}
		}
	break;
	case 14:
#line 104 "RawParser.rl"
	{
			if (ServerCVarsEnd != null) {
				ServerCVarsEnd();
			}
		}
	break;
	case 15:
#line 110 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 16:
#line 110 "RawParser.rl"
	{
			if (p == pe - 1 && ServerSay != null) {
				ServerSay(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 17:
#line 116 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 18:
#line 116 "RawParser.rl"
	{
			if (WorldTrigger != null) {
				WorldTrigger(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 19:
#line 122 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 20:
#line 122 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 21:
#line 123 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 22:
#line 123 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 23:
#line 123 "RawParser.rl"
	{
			if (TeamTrigger != null) {
				TeamTrigger(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				            new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
		}
	break;
	case 24:
#line 129 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 25:
#line 129 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 26:
#line 129 "RawParser.rl"
	{ tmp5 = p; }
	break;
	case 27:
#line 129 "RawParser.rl"
	{ tmp6 = p; }
	break;
	case 28:
#line 129 "RawParser.rl"
	{
			if (TeamScore != null) {
				TeamScore(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				          Number(data, tmp3, tmp4 - tmp3),
				          Number(data, tmp5, tmp6 - tmp5));
			}
		}
	break;
	case 29:
#line 137 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 30:
#line 137 "RawParser.rl"
	{
			if (StartedMap != null) {
				StartedMap(new ArraySegment<byte>(data, tmp1, p - tmp1));
			}
		}
	break;
	case 31:
#line 143 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 32:
#line 143 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 33:
#line 143 "RawParser.rl"
	{
			if (Meta != null) {
				Meta(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					 new ArraySegment<byte>(data, p + 1, pe - p - 1));
			}
		}
	break;
	case 34:
#line 150 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 35:
#line 150 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 36:
#line 150 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 37:
#line 150 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 38:
#line 150 "RawParser.rl"
	{
			if (Kick != null) {
				Kick(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
				     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
		}
	break;
	case 39:
#line 157 "RawParser.rl"
	{ tmp5 = -1; }
	break;
	case 40:
#line 157 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 41:
#line 157 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 42:
#line 157 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 43:
#line 157 "RawParser.rl"
	{
			if (Rcon != null) {
				Rcon(tmp5 != -1,
				     new ArraySegment<byte>(data, tmp1, tmp3 - tmp1 - 8),
				     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
			}
			tmp5 = 0;
		}
	break;
	case 44:
#line 166 "RawParser.rl"
	{ value_start = p; }
	break;
	case 45:
#line 166 "RawParser.rl"
	{
			value = new ArraySegment<byte>(data, value_start, p - value_start);
			value_start = 0;
		}
	break;
	case 46:
#line 171 "RawParser.rl"
	{ value_start = p; }
	break;
	case 47:
#line 171 "RawParser.rl"
	{
			target = new ArraySegment<byte>(data, value_start, p - value_start);
			value_start = 0;
		}
	break;
	case 48:
#line 176 "RawParser.rl"
	{ tmp1 = p; }
	break;
	case 49:
#line 176 "RawParser.rl"
	{ tmp2 = p; }
	break;
	case 50:
#line 177 "RawParser.rl"
	{
				if (PlayerConnect != null) {
					PlayerConnect(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					              value);
				}
			}
	break;
	case 51:
#line 183 "RawParser.rl"
	{
				if (PlayerDisconnect != null) {
					PlayerDisconnect(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 52:
#line 188 "RawParser.rl"
	{
				if (PlayerEnterGame != null) {
					PlayerEnterGame(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 53:
#line 193 "RawParser.rl"
	{
				if (PlayerJoinTeam != null) {
					PlayerJoinTeam(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					               value);
				}
			}
	break;
	case 54:
#line 200 "RawParser.rl"
	{ tmp3 = 0; tmp4 = 0; }
	break;
	case 55:
#line 200 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 56:
#line 200 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 57:
#line 201 "RawParser.rl"
	{
				if (tmp3 == 0) {
					if (PlayerTrigger != null) {
						PlayerTrigger(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
									  value);
					}
				} else {
					if (PlayerTriggerAgainst != null) {
						PlayerTriggerAgainst(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
						                     value,
						                     new ArraySegment<byte>(data, tmp3, tmp4 - tmp3));
					}
				}
			}
	break;
	case 58:
#line 215 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 59:
#line 215 "RawParser.rl"
	{ tmp4 = p; }
	break;
	case 60:
#line 215 "RawParser.rl"
	{ tmp5 = p; }
	break;
	case 61:
#line 215 "RawParser.rl"
	{ tmp6 = p; }
	break;
	case 62:
#line 215 "RawParser.rl"
	{
				if (PlayerAttack != null) {
					PlayerAttack(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					             new ArraySegment<byte>(data, tmp3, tmp4 - tmp3),
					             new ArraySegment<byte>(data, tmp5, tmp6 - tmp5));
				}
			}
	break;
	case 63:
#line 222 "RawParser.rl"
	{
				if (PlayerKill != null) {
					PlayerKill(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					           target,
					           value);
				}
			}
	break;
	case 64:
#line 229 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 65:
#line 229 "RawParser.rl"
	{
				if (p == pe - 1 && PlayerSay != null) {
					PlayerSay(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					          new ArraySegment<byte>(data, tmp3, p - tmp3));
				}
			}
	break;
	case 66:
#line 235 "RawParser.rl"
	{ tmp3 = p; }
	break;
	case 67:
#line 235 "RawParser.rl"
	{
				if (p == pe - 1 && PlayerSayTeam != null) {
					PlayerSayTeam(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					              new ArraySegment<byte>(data, tmp3, p - tmp3));
				}
			}
	break;
	case 68:
#line 241 "RawParser.rl"
	{
				if (PlayerValidate != null) {
					PlayerValidate(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1));
				}
			}
	break;
	case 69:
#line 246 "RawParser.rl"
	{
				if (PlayerNameChange != null) {
					PlayerNameChange(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					           value);
				}
			}
	break;
	case 70:
#line 252 "RawParser.rl"
	{
				if (PlayerSuicide != null) {
					PlayerSuicide(new ArraySegment<byte>(data, tmp1, tmp2 - tmp1),
					        value);
				}
			}
	break;
	case 71:
#line 275 "RawParser.rl"
	{
				if (End != null) {
					End();
				}
			}
	break;
#line 1388 "RawParser.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 340 "RawParser.rl"
			return p == pe;
		}
	}
}
